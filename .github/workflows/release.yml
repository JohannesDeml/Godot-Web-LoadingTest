name: Build Godot project & release

on:
  push:
    tags:
      - '*'
    branches:
      - main

jobs:
  variables:
    name: Define variables üîó
    runs-on: ubuntu-latest
    outputs:
      GODOT_VERSION: ${{ steps.set_godot_version.outputs.VERSION }}
      TAG: ${{ steps.set_tag.outputs.VERSION }}
      BUILD_NAME: ${{ steps.set_build_name.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Set godot version
        id: set_godot_version
        run: |
          echo "Full project line with version"
          grep 'config/features=PackedStringArray' godot/project.godot

          GODOT_VERSION=$(grep 'config/features=PackedStringArray' godot/project.godot | grep -o '"4\.[0-9]*"' | head -n 1 | tr -d '"')
          echo "VERSION=$GODOT_VERSION" >> $GITHUB_OUTPUT

      - name: Set tag
        id: set_tag
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF/refs\/tags\//}
          else
            VERSION="${{ steps.set_godot_version.outputs.VERSION }}"
            VERSION="$VERSION-webgl-main"
          fi

          # Add .0 patch version if needed for both tagged and untagged builds
          BASE_VERSION=${VERSION%%-*}  # Get everything before the first dash
          if [[ $BASE_VERSION =~ ^[0-9]+\.[0-9]+$ ]]; then
            VERSION="${VERSION//$BASE_VERSION/$BASE_VERSION.0}"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Set target name
        id: set_build_name
        run: echo "VERSION=WebGL-${{ steps.set_tag.outputs.VERSION }}" >> $GITHUB_OUTPUT

      - name: Log variables
        run: |
          echo "GODOT_VERSION -> ${{ steps.set_godot_version.outputs.VERSION }}"
          echo "TAG -> ${{ steps.set_tag.outputs.VERSION }}"
          echo "BUILD_NAME -> ${{ steps.set_build_name.outputs.VERSION }}"

  buildProject:
    name: Create Godot WebGL Build üèó
    needs: [ variables ]
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:${{ needs.variables.outputs.GODOT_VERSION }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          lfs: true

      - name: Move export templates to user directory
        run: |
          mkdir -v -p ~/.local/share/godot/export_templates/
          mv /root/.local/share/godot/export_templates/${{ needs.variables.outputs.GODOT_VERSION }}.stable ~/.local/share/godot/export_templates/${{ needs.variables.outputs.GODOT_VERSION }}.stable

      - name: Check export templates directory
        run: |
          echo "Checking if export templates directory exists..."
          if [ -d ~/.local/share/godot/export_templates ]; then
            echo "Directory exists. Contents:"
            ls -la ~/.local/share/godot/export_templates/*/
          else
            echo "Directory does not exist"
          fi

      - name: Build project
        run: |
          mkdir -p build/web
          cd godot
          if [[ "${{ needs.variables.outputs.TAG }}" == *"debug"* ]]; then
            godot --headless --export-debug "Web" ../build/web/index.html
          else
            godot --headless --export-release "Web" ../build/web/index.html
          fi

      - name: Optimize Wasm
        uses: JohannesDeml/binaryen-wasm-opt@v1
        with:
          file: build/web/*.wasm
          optimize_all: true
          options: --enable-bulk-memory --enable-threads --enable-exception-handling --enable-simd -O --intrinsic-lowering -O

      - name: Copy logo from template to build
        run: cp godot/WebGLTemplates/Release/logo.svg build/web/logo.svg

      - uses: actions/upload-artifact@v4
        with:
          name: ${{ needs.variables.outputs.BUILD_NAME }}
          path: build/web

  createRelease:
    name: Create Github release üêô
    if: ${{ github.ref_type == 'tag' }}
    needs: [ variables ]
    runs-on: ubuntu-latest
    steps:
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body: |
            ## Changes
            *

            [WebGL Demo](https://your-demo-url-here/${{ needs.variables.outputs.TAG }}/)
          draft: true

  deployOnServer:
    name: Deploy on server üöÄ
    needs: [ variables, buildProject ]
    if: ${{ github.repository_owner == 'JohannesDeml' }}  # Replace with your username
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: ${{ needs.variables.outputs.BUILD_NAME }}
          path: build

      - name: Compress assets
        run: |
          # Install compression tools
          sudo apt-get update && sudo apt-get install -y brotli gzip

          # Find and compress all .js and .wasm files
          find build -type f \( -name "*.js" -o -name "*.wasm" \) -exec sh -c '
            brotli -k "$1"
            gzip -k "$1"
          ' sh {} \;

      - name: Display structure of root files
        run: ls -R
        working-directory: build

      - name: Deploy ‚§¥
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_SERVER }}
          username: ${{ secrets.FTP_USER }}
          password: ${{ secrets.FTP_PASSWORD }}
          port: 21
          protocol: ftps
          local-dir: ./build/
          server-dir: ./${{ needs.variables.outputs.TAG }}/
          dangerous-clean-slate: true